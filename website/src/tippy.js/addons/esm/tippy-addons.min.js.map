{"version":3,"file":"tippy-addons.min.js","sources":["../../src/addons/delegate.ts","../../src/addons/createSingleton.ts"],"sourcesContent":["import { Targets, Instance, Props } from '../types'\nimport tippy from '..'\nimport { throwErrorWhen } from '../validation'\n\ninterface ListenerObj {\n  element: Element\n  eventType: string\n  listener: EventListener\n  options: boolean | object\n}\n\n/**\n * Creates a delegate instance that controls the creation of tippy instances\n * for child elements (`target` CSS selector).\n * Port of v4's `target` prop to a separate function.\n */\nexport default function delegate(\n  targets: Targets,\n  props: Props & { target: string },\n): Instance | Instance[] | null {\n  if (__DEV__) {\n    throwErrorWhen(\n      !props || !props.target,\n      'You must specify a `target` prop indicating the CSS selector string ' +\n        'matching the target elements that should receive a tippy.',\n    )\n  }\n\n  let listeners: ListenerObj[] = []\n  let childTippyInstances: Instance[] = []\n\n  const { target } = props\n  delete props.target\n\n  const instanceOrInstances = tippy(targets, props)\n\n  function onTrigger(event: Event): void {\n    if (event.target) {\n      const targetNode = (event.target as Element).closest(target)\n\n      if (targetNode) {\n        const instance = tippy(targetNode, { ...props, showOnInit: true })\n\n        if (instance) {\n          childTippyInstances = childTippyInstances.concat(instance)\n        }\n      }\n    }\n  }\n\n  function on(\n    element: Element,\n    eventType: string,\n    listener: EventListener,\n    options: object | boolean = false,\n  ): void {\n    element.addEventListener(eventType, listener, options)\n    listeners.push({\n      element,\n      eventType,\n      listener,\n      options,\n    })\n  }\n\n  function addEventListeners(instance: Instance): void {\n    const { reference } = instance\n    instance.props.trigger\n      .trim()\n      .split(' ')\n      .forEach(\n        (eventType): void => {\n          switch (eventType) {\n            case 'mouseenter': {\n              on(reference, 'mouseover', onTrigger)\n              break\n            }\n            case 'focus': {\n              on(reference, 'focusin', onTrigger)\n              break\n            }\n            case 'click': {\n              on(reference, 'click', onTrigger)\n            }\n          }\n        },\n      )\n  }\n\n  function removeEventListeners(listeners: ListenerObj[]): void {\n    listeners.forEach(\n      ({ element, eventType, listener, options }: ListenerObj): void => {\n        element.removeEventListener(eventType, listener, options)\n      },\n    )\n    listeners = []\n  }\n\n  function applyMutations(instance: Instance): void {\n    const originalDestroy = instance.destroy\n    instance.destroy = (shouldDestroyChildInstances: boolean = true): void => {\n      if (shouldDestroyChildInstances) {\n        childTippyInstances.forEach(\n          (instance): void => {\n            instance.destroy()\n          },\n        )\n      }\n      childTippyInstances = []\n\n      removeEventListeners(listeners)\n      originalDestroy()\n    }\n\n    addEventListeners(instance)\n\n    instance.setProps({ trigger: 'manual' })\n  }\n\n  if (instanceOrInstances) {\n    if (Array.isArray(instanceOrInstances)) {\n      const instances = instanceOrInstances\n      instances.forEach(applyMutations)\n    } else {\n      const instance = instanceOrInstances\n      applyMutations(instance)\n    }\n  }\n\n  return instanceOrInstances\n}\n","import { Instance } from '../types'\nimport tippy from '..'\nimport { getValue, hasOwnProperty } from '../utils'\nimport { throwErrorWhen } from '../validation'\n\ninterface InstanceMaybePartOfSingleton extends Instance {\n  __singleton__?: boolean\n}\n\n/**\n * Re-uses a single tippy element for many different tippy instances.\n * Replaces v4's `tippy.group()`.\n */\nexport default function createSingleton(\n  tippyInstances: InstanceMaybePartOfSingleton[],\n  optionalProps: { delay: number | [number, number] } = { delay: 0 },\n): Instance {\n  if (__DEV__) {\n    if (!Array.isArray(tippyInstances)) {\n      throwErrorWhen(\n        !tippyInstances,\n        'First argument to `createSingleton()` must be an array of tippy ' +\n          'instances. The passed value was `' +\n          tippyInstances +\n          '`',\n      )\n\n      throwErrorWhen(\n        // @ts-ignore\n        tippyInstances.reference && tippyInstances.reference._tippy,\n        'First argument to `createSingleton()` must be an *array* of tippy ' +\n          'instances. The passed value was a *single* tippy instance.',\n      )\n    }\n\n    const isAnyInstancePartOfExistingSingleton = tippyInstances.some(\n      (instance): boolean => hasOwnProperty(instance, '__singleton__'),\n    )\n\n    throwErrorWhen(\n      isAnyInstancePartOfExistingSingleton,\n      'The passed tippy instance(s) are already part of an existing ' +\n        'singleton instance. Make sure you destroy the previous singleton ' +\n        'before calling `createSingleton()` again.',\n    )\n\n    tippyInstances.forEach(\n      (instance): void => {\n        instance.__singleton__ = true\n      },\n    )\n  }\n\n  const singletonInstance = tippy(document.createElement('div')) as Instance\n  let { delay } = optionalProps\n\n  let showTimeout: any\n  let hideTimeout: any\n  let onTrigger: (instance: Instance, event: Event) => void\n  let onUntrigger: (instance: Instance, event: Event) => void\n\n  function clearTimeouts(): void {\n    clearTimeout(showTimeout)\n    clearTimeout(hideTimeout)\n  }\n\n  tippyInstances.forEach(\n    (instance): void => {\n      // To prevent bugs with `hideOnClick`, we need to let the original tippy\n      // instance also go through its lifecycle (i.e. be mounted to the DOM as\n      // well). To prevent it from being seen/overlayed over the singleton\n      // tippy, we can set its opacity to 0\n      instance.popper.style.opacity = '0'\n\n      onTrigger = instance.props.onTrigger\n      onUntrigger = instance.props.onUntrigger\n\n      const originalClearDelayTimeouts = instance.clearDelayTimeouts\n      instance.clearDelayTimeouts = (): void => {\n        originalClearDelayTimeouts()\n        clearTimeouts()\n      }\n\n      instance.setProps({\n        delay: 0,\n        onTrigger(instance, event): void {\n          onTrigger(instance, event)\n\n          const props = { ...instance.props }\n          delete props.delay\n\n          singletonInstance.setProps(props)\n\n          singletonInstance.reference.getBoundingClientRect = ():\n            | DOMRect\n            | ClientRect => {\n            return instance.reference.getBoundingClientRect()\n          }\n\n          clearTimeouts()\n          // Edge case: if the tippy is currently hiding (but still mounted and\n          // visible due to its opacity), it will slide to the new reference\n          // element but fully to fade out before fading back in.\n          // Also, we need to ensure the `popper` element doesn't set its\n          // `transitionDuration` to 0ms, so it can transition smoothly\n          if (\n            !singletonInstance.state.isVisible &&\n            singletonInstance.state.isMounted\n          ) {\n            singletonInstance.show(undefined, false)\n          } else {\n            showTimeout = setTimeout((): void => {\n              singletonInstance.show()\n            }, getValue(delay, 0, tippy.defaultProps.delay))\n          }\n        },\n        onUntrigger(instance, event): void {\n          onUntrigger(instance, event)\n\n          clearTimeouts()\n          hideTimeout = setTimeout((): void => {\n            singletonInstance.hide()\n          }, getValue(delay, 1, tippy.defaultProps.delay))\n        },\n      })\n\n      // Ensure the lifecycles functions are updateable\n      const originalSetProps = instance.setProps\n      instance.setProps = (partialProps): void => {\n        // `delay` can't be updated\n        delete partialProps.delay\n\n        originalSetProps(partialProps)\n\n        onTrigger = partialProps.onTrigger || onTrigger\n        onUntrigger = partialProps.onUntrigger || onUntrigger\n      }\n    },\n  )\n\n  const originalSetProps = singletonInstance.setProps\n  singletonInstance.setProps = (partialProps): void => {\n    delay = partialProps.delay !== undefined ? partialProps.delay : delay\n    originalSetProps(partialProps)\n  }\n\n  const originalDestroy = singletonInstance.destroy\n  singletonInstance.destroy = (\n    shouldDestroyPassedInstances: boolean = true,\n  ): void => {\n    tippyInstances.forEach(\n      (instance): void => {\n        // Reset the original lifecycle hooks to prevent stack overflow if\n        // calling again.\n        // Note: users must always destroy the singleton instance before calling\n        // `createSingleton()` again on the same instances.\n        instance.setProps({\n          onTrigger,\n          onUntrigger,\n        })\n\n        if (__DEV__) {\n          delete instance.__singleton__\n        }\n\n        if (shouldDestroyPassedInstances) {\n          instance.destroy()\n        }\n      },\n    )\n\n    originalDestroy()\n  }\n\n  return singletonInstance\n}\n"],"names":["delegate","targets","props","listeners","childTippyInstances","target","instanceOrInstances","tippy","onTrigger","event","targetNode","closest","instance","showOnInit","concat","on","element","eventType","listener","options","addEventListener","push","applyMutations","originalDestroy","destroy","forEach","removeEventListener","removeEventListeners","reference","trigger","trim","split","addEventListeners","setProps","Array","isArray","createSingleton","tippyInstances","showTimeout","hideTimeout","onUntrigger","optionalProps","delay","singletonInstance","document","createElement","clearTimeouts","clearTimeout","popper","style","opacity","originalClearDelayTimeouts","clearDelayTimeouts","getBoundingClientRect","state","isVisible","isMounted","show","undefined","setTimeout","getValue","defaultProps","hide","originalSetProps","partialProps","shouldDestroyPassedInstances"],"mappings":"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"}